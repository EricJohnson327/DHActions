#
# This workflow will build and run all unit tests.
#

name: DevHome-CI

on:
  workflow_dispatch:
  push:
    branches: [ "main", "feature*" ]

permissions:
  contents: read

jobs:
  dotnet-build-and-test:
    strategy:
        matrix:
          os: [windows-latest]
          configuration: [Release, Debug]
          dotnet-version: ['6.0.x']
    runs-on: ${{ matrix.os }}
    env:
      NUGET_CERT_REVOCATION_MODE: offline
    steps:
    - uses: actions/checkout@v3
      with:
        clean: true

    - name: Setup .NET SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GPR_READ_TOKEN }}

    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: Find solutions
      shell: bash
      run: |
        echo "DevHomeSdkSolution=$(find ./dotnet -type f -name "DevHomeSDK.sln" | tr '\n' ' ')" >> $GITHUB_ENV
        echo "DevHomeSolution=$(find ./dotnet -type f -name "DevHome.sln" | tr '\n' ' ')" >> $GITHUB_ENV

    # - name: Restore dependencies
    #   shell: bash
    #   run: |
    #     dotnet restore $DevHomeSdkSolution
    #     dotnet restore $DevHomeSolution

    # - name: Build_SDK
    #   shell: bash
    #   run: dotnet build $DevHomeSdkSolution --no-restore --configuration ${{ matrix.configuration }}

    # - name: Build_DevHome
    #   shell: bash
    #   run: dotnet build $DevHomeSolution --no-restore --configuration ${{ matrix.configuration }}

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        nuget restore $DevHomeSdkSolution
        nuget restore $DevHomeSolution

    - name: Build_DevHome
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=Release /p:Platform=x64 DevHome.sln

    - name: Find unit test projects
      shell: bash
      run: |
        echo "unittests=$(find ./dotnet -type f -name "*.UnitTests.csproj" | tr '\n' ' ')" >> $GITHUB_ENV
        echo "devhometests=$(find ./dotnet -type f -name "DevHome.Test.csproj" | tr '\n' ' ')" >> $GITHUB_ENV

    - name: Test
      shell: bash
      run: |
        for project in ${{ env.devhometests }}; do
            dotnet test $project --no-build --verbosity normal --logger trx --results-directory ./TestResults --configuration ${{ matrix.configuration }}
        done
        for project in ${{ env.unittests }}; do
            dotnet test $project --no-build --verbosity normal --logger trx --results-directory ./TestResults --configuration ${{ matrix.configuration }}
        done

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-testresults-${{ matrix.configuration }}
        path: ./TestResults
      if: ${{ always() }}
